plugins {
    id "fabric-loom" version "1.10-SNAPSHOT"
}

base {
    archivesName = project.archives_base_name
    group = project.maven_group
    def suffix = project.hasProperty('build_number') ? project.findProperty('build_number') : 'local'
    version = project.minecraft_version + "-" + suffix
}

repositories {
    mavenLocal()

    maven {
        name = "Meteor Dev Releases"
        url = "https://maven.meteordev.org/releases"
    }
    maven {
        name = "Meteor Dev Snapshots"
        url = "https://maven.meteordev.org/snapshots"
    }

    maven {
        name = "JitPack"
        url 'https://jitpack.io'
    }

    maven {
        name = "ViaVersion"
        url = "https://repo.viaversion.com"
    }

    maven {
		name = "Lenni0451"
		url = "https://maven.lenni0451.net/everything"
	}
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/releases"
	}

    maven {
		name = "OpenCollab Snapshots"
		url = "https://repo.opencollab.dev/maven-snapshots/"
	}
}

dependencies {
    // Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Meteor
    modImplementation "meteordevelopment:meteor-client:${project.meteor_version}"

    // Jackson
    include implementation("com.fasterxml.jackson.core:jackson-core:${project.jackson_version}")
    include implementation("com.fasterxml.jackson.core:jackson-databind:${project.jackson_version}")
    include implementation("com.fasterxml.jackson.core:jackson-annotations:${project.jackson_version}")

    // ViaFabricPlus
//    modImplementation("com.viaversion:viafabricplus-api:${project.viafabricplus_version}")
    modImplementation("com.viaversion:viafabricplus:${project.viafabricplus_version}")

    modImplementation "com.ptsmods:devlogin:${project.devlogin_version}"
}

processResources {
    def buildNumber = project.hasProperty('build_number') ? project.getProperty('build_number').toString() : ''
    def commit = project.hasProperty('commit') ? project.getProperty('commit').toString() : ''

    def propertyMap = [
        version: project.version,
        build_number: buildNumber,
        commit: commit,
        minecraft_version: project.property('minecraft_version'),
        loader_version: project.property('loader_version')
    ]

    inputs.properties(propertyMap)

    filesMatching("fabric.mod.json") {
        expand(propertyMap)
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding("UTF-8")
}


loom {
    accessWidenerPath = file("src/main/resources/mlp.accesswidener")
}

java {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_21
}
